// Code generated by MockGen. DO NOT EDIT.
// Source: ui.go

package moduletesting

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUI is a mock of UI interface
type MockUI struct {
	ctrl     *gomock.Controller
	recorder *MockUIMockRecorder
}

// MockUIMockRecorder is the mock recorder for MockUI
type MockUIMockRecorder struct {
	mock *MockUI
}

// NewMockUI creates a new mock instance
func NewMockUI(ctrl *gomock.Controller) *MockUI {
	mock := &MockUI{ctrl: ctrl}
	mock.recorder = &MockUIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockUI) EXPECT() *MockUIMockRecorder {
	return _m.recorder
}

// Output mocks base method
func (_m *MockUI) Output(msg string) {
	_m.ctrl.Call(_m, "Output", msg)
}

// Output indicates an expected call of Output
func (_mr *MockUIMockRecorder) Output(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Output", reflect.TypeOf((*MockUI)(nil).Output), arg0)
}

// Section mocks base method
func (_m *MockUI) Section(msg string) {
	_m.ctrl.Call(_m, "Section", msg)
}

// Section indicates an expected call of Section
func (_mr *MockUIMockRecorder) Section(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Section", reflect.TypeOf((*MockUI)(nil).Section), arg0)
}

// Subsection mocks base method
func (_m *MockUI) Subsection(msg string) {
	_m.ctrl.Call(_m, "Subsection", msg)
}

// Subsection indicates an expected call of Subsection
func (_mr *MockUIMockRecorder) Subsection(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Subsection", reflect.TypeOf((*MockUI)(nil).Subsection), arg0)
}

// Warn mocks base method
func (_m *MockUI) Warn(msg string) {
	_m.ctrl.Call(_m, "Warn", msg)
}

// Warn indicates an expected call of Warn
func (_mr *MockUIMockRecorder) Warn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Warn", reflect.TypeOf((*MockUI)(nil).Warn), arg0)
}

// Error mocks base method
func (_m *MockUI) Error(msg string) {
	_m.ctrl.Call(_m, "Error", msg)
}

// Error indicates an expected call of Error
func (_mr *MockUIMockRecorder) Error(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Error", reflect.TypeOf((*MockUI)(nil).Error), arg0)
}

// ItemSuccess mocks base method
func (_m *MockUI) ItemSuccess(msg string) {
	_m.ctrl.Call(_m, "ItemSuccess", msg)
}

// ItemSuccess indicates an expected call of ItemSuccess
func (_mr *MockUIMockRecorder) ItemSuccess(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ItemSuccess", reflect.TypeOf((*MockUI)(nil).ItemSuccess), arg0)
}

// ItemSkipped mocks base method
func (_m *MockUI) ItemSkipped(msg string) {
	_m.ctrl.Call(_m, "ItemSkipped", msg)
}

// ItemSkipped indicates an expected call of ItemSkipped
func (_mr *MockUIMockRecorder) ItemSkipped(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ItemSkipped", reflect.TypeOf((*MockUI)(nil).ItemSkipped), arg0)
}

// ItemFailure mocks base method
func (_m *MockUI) ItemFailure(msg string) {
	_m.ctrl.Call(_m, "ItemFailure", msg)
}

// ItemFailure indicates an expected call of ItemFailure
func (_mr *MockUIMockRecorder) ItemFailure(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ItemFailure", reflect.TypeOf((*MockUI)(nil).ItemFailure), arg0)
}

// Confirm mocks base method
func (_m *MockUI) Confirm(msg string) (bool, error) {
	ret := _m.ctrl.Call(_m, "Confirm", msg)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Confirm indicates an expected call of Confirm
func (_mr *MockUIMockRecorder) Confirm(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Confirm", reflect.TypeOf((*MockUI)(nil).Confirm), arg0)
}
