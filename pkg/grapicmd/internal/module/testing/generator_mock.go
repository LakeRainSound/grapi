// Code generated by MockGen. DO NOT EDIT.
// Source: generator.go

// Package moduletesting is a generated GoMock package.
package moduletesting

import (
	gomock "github.com/golang/mock/gomock"
	. "github.com/izumin5210/grapi/pkg/grapicmd/internal/module"
	reflect "reflect"
)

// MockGeneratorFactory is a mock of GeneratorFactory interface
type MockGeneratorFactory struct {
	ctrl     *gomock.Controller
	recorder *MockGeneratorFactoryMockRecorder
}

// MockGeneratorFactoryMockRecorder is the mock recorder for MockGeneratorFactory
type MockGeneratorFactoryMockRecorder struct {
	mock *MockGeneratorFactory
}

// NewMockGeneratorFactory creates a new mock instance
func NewMockGeneratorFactory(ctrl *gomock.Controller) *MockGeneratorFactory {
	mock := &MockGeneratorFactory{ctrl: ctrl}
	mock.recorder = &MockGeneratorFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGeneratorFactory) EXPECT() *MockGeneratorFactoryMockRecorder {
	return m.recorder
}

// Project mocks base method
func (m *MockGeneratorFactory) Project() Generator {
	ret := m.ctrl.Call(m, "Project")
	ret0, _ := ret[0].(Generator)
	return ret0
}

// Project indicates an expected call of Project
func (mr *MockGeneratorFactoryMockRecorder) Project() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Project", reflect.TypeOf((*MockGeneratorFactory)(nil).Project))
}

// Service mocks base method
func (m *MockGeneratorFactory) Service() Generator {
	ret := m.ctrl.Call(m, "Service")
	ret0, _ := ret[0].(Generator)
	return ret0
}

// Service indicates an expected call of Service
func (mr *MockGeneratorFactoryMockRecorder) Service() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockGeneratorFactory)(nil).Service))
}

// Command mocks base method
func (m *MockGeneratorFactory) Command() Generator {
	ret := m.ctrl.Call(m, "Command")
	ret0, _ := ret[0].(Generator)
	return ret0
}

// Command indicates an expected call of Command
func (mr *MockGeneratorFactoryMockRecorder) Command() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MockGeneratorFactory)(nil).Command))
}

// MockGenerator is a mock of Generator interface
type MockGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockGeneratorMockRecorder
}

// MockGeneratorMockRecorder is the mock recorder for MockGenerator
type MockGeneratorMockRecorder struct {
	mock *MockGenerator
}

// NewMockGenerator creates a new mock instance
func NewMockGenerator(ctrl *gomock.Controller) *MockGenerator {
	mock := &MockGenerator{ctrl: ctrl}
	mock.recorder = &MockGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGenerator) EXPECT() *MockGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method
func (m *MockGenerator) Generate(dir string, data interface{}) error {
	ret := m.ctrl.Call(m, "Generate", dir, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Generate indicates an expected call of Generate
func (mr *MockGeneratorMockRecorder) Generate(dir, data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockGenerator)(nil).Generate), dir, data)
}
