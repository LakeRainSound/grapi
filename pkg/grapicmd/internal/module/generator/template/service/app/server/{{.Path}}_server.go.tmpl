package {{.Go.Package }}

import (
	"context"
{{range .Go.Imports}}
	"{{.}}"
{{- end}}

	{{.PbGo.PackageName}} "{{ .PbGo.PackagePath }}"
)

// New creates a new {{.Go.ServerName}} instance.
func New() interface {
	{{.PbGo.PackageName }}.{{.Go.ServerName}}
	grapiserver.Server
} {
	return &{{.Go.StructName}}{}
}

type {{.Go.StructName}} struct {
}

// RegisterWithServer implements grapiserver.Server.RegisterWithServer.
func (s *{{.Go.StructName}}) RegisterWithServer(grpcSvr *grpc.Server) {
	{{.PbGo.PackageName}}.Register{{.Go.ServerName}}(grpcSvr, s)
}

// RegisterWithHandler implements grapiserver.Server.RegisterWithHandler.
func (s *{{.Go.StructName}}) RegisterWithHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return {{.PbGo.PackageName}}.Register{{.ServiceName}}ServiceHandler(ctx, mux, conn)
}
{{$go := .Go -}}
{{$pbGo := .PbGo -}}
{{- range .Methods}}
func (s *{{$go.StructName}}) {{.Method}}(ctx context.Context, req *{{.RequestGo $pbGo.PackageName}}) (*{{.ResponseGo $pbGo.PackageName}}, error) {
	// TODO: Not yet implemented.
	return nil, status.Error(codes.Unimplemented, "TODO: You should implement it!")
}
{{end -}}
